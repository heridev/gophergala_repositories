<!DOCTYPE html>
<html>
  <head>
    <meta http-eqiv="content-type" content="text/html;charset=utf-8">
    <title>Go con Ejemplos: Canales</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-51269806-1', 'goconejemplos.com');
    ga('send', 'pageview');

  </script>
  <body>
    <div class="example" id="canales">
      <h2><a href="./">Go con Ejemplos</a>: Canales</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Los <em>Canales</em> son las tuberías que conectan
goroutines concurrentes. Puedes enviar valores por
un canal de una goroutine y recibir esos valores en
otra goroutine.</p>

          </td>
          <td class="code empty leading">
          
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
          <a href="http://play.golang.org/p/Lm_JaE4EC7"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
          
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
          
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Puedes crear un canal nuevo con <code>make(chan val-type)</code>.
Los canales son del tipo de datos de los valores que
transportan.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>    <span class="nx">mensajes</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><em>Envía</em> un valor por un canal usando la sintaxis
<code>canal &lt;-</code>. Aquí estamos enviando <code>&#34;ping&#34;</code> al canal
de <code>mensajes</code> que creamos arriba, de otra nueva
goroutine.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nx">mensajes</span> <span class="o">&lt;-</span> <span class="s">&quot;ping&quot;</span> <span class="p">}()</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>La sintaxis <code>&lt;-canal</code> <em>recibe</em> un valor del canal especificado.
Aquí recibimos el mensaje <code>&#34;ping&#34;</code> que envíamos arriba
y lo mostramos en pantalla.</p>

          </td>
          <td class="code">
          
            <div class="highlight"><pre>    <span class="nx">msg</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">mensajes</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Cuando corremos el programa el mensaje <code>&#34;ping&#34;</code> se
pasa de una goroutine a otra a través de nuestro
canal.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre><span class="gp">$</span> go run channels.go
<span class="go">ping</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Por defecto la recepción y los envíos se bloquean hasta
que ambos receptor y transmisor están listos. Esta
propiedad nos permite esperar hasta el mensaje
<code>&#34;ping&#34;</code> hasta el final del programa sin tener
que usar ningún otro tipo de sincronización.</p>

          </td>
          <td class="code empty">
          
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Siguiente ejemplo: <a href="buffering-de-canales">Buffering de Canales</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/mmcgrana">@mmcgrana</a> | <a href="mailto:mmcgrana@gmail.com">feedback</a> | <a href="https://github.com/mmcgrana/gobyexample/blob/master/examples/canales">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
      </p>
    </div>
  </body>
</html>
