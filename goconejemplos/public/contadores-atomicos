<!DOCTYPE html>
<html>
  <head>
    <meta http-eqiv="content-type" content="text/html;charset=utf-8">
    <title>Go con Ejemplos: Contadores atómicos</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-51269806-1', 'goconejemplos.com');
    ga('send', 'pageview');

  </script>
  <body>
    <div class="example" id="contadores-atomicos">
      <h2><a href="./">Go con Ejemplos</a>: Contadores atómicos</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>El mecanismo principal para manejar estados en Go es la comunicación
mediante canales (channels).  Podemos ver esto, por ejemplo, con los
<a><em>worker-pools</em></a>. Además de canales existen otras formas para
manejar estados.  En éste código conoceremos el uso del paquete
<code>sync/atomic</code> para <em>contadores atómicos</em>, los cuales pueden ser accedidos
por múltiples <em>goroutines</em>.</p>

          </td>
          <td class="code empty leading">
          
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
          <a href="http://play.golang.org/p/WjsuP6EAAu"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
          
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
<span class="kn">import</span> <span class="s">&quot;time&quot;</span>
<span class="kn">import</span> <span class="s">&quot;sync/atomic&quot;</span>
<span class="kn">import</span> <span class="s">&quot;runtime&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
          
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Usaremos un entero sin signo para representar a un contador (que siempre
será positivo).</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>    <span class="kd">var</span> <span class="nx">ops</span> <span class="kt">uint64</span> <span class="p">=</span> <span class="mi">0</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Para simular actualizaciones concurrentes iniciaremos 50 <em>goroutines</em>,
cada una de las cuales incrementará el contador, aproximadamente una vez
cada milisegundo.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">50</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Para incrementar el contador de manera
<a href="http://es.wikipedia.org/wiki/Atomicidad">atómica</a> usamos la
función <code>atomic.AddUint64</code>, pasando la dirección en memoria
del contador <code>ops</code> usando la sintaxis <code>&amp;</code>.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>                <span class="nx">atomic</span><span class="p">.</span><span class="nx">AddUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ops</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Permite continuar a otros <em>goroutines</em>.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>                <span class="nx">runtime</span><span class="p">.</span><span class="nx">Gosched</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}()</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Espera un segundo. Esto permite que se acumulen algunos valores en
<code>ops</code>.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre>    <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Para usar de manera segura el contador mientras está siendo actualizado
por otras <em>goroutines</em>, hacemos una copia del valor actual en la
variable <code>opsFinal</code>, usando la función <code>atomic.LoadUint64</code>. Tal como en
el bloque anterior necesitamos pasar la dirección de la variable <code>ops</code>,
es decir <code>&amp;ops</code>, de donde se copiará el valor.</p>

          </td>
          <td class="code">
          
            <div class="highlight"><pre>    <span class="nx">opsFinal</span> <span class="o">:=</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">LoadUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ops</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;ops:&quot;</span><span class="p">,</span> <span class="nx">opsFinal</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Al ejecutar el programa podemos observar que se
ejecutaron alrededor de 40,000 operaciones.</p>

          </td>
          <td class="code leading">
          
            <div class="highlight"><pre><span class="gp">$</span> go run atomic-counters.go
<span class="go">ops: 40200</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>A continuación veremos <em>mutexes</em>, otra herramienta para
administrar estados.</p>

          </td>
          <td class="code empty">
          
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Siguiente ejemplo: <a href="mutexes">Mutexes</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/mmcgrana">@mmcgrana</a> | <a href="mailto:mmcgrana@gmail.com">feedback</a> | <a href="https://github.com/mmcgrana/gobyexample/blob/master/examples/contadores-atomicos">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
      </p>
    </div>
  </body>
</html>
