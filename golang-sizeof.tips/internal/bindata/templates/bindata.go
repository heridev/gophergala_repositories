package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templs_404_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\x8e\x83\x30\x0c\xc6\xf1\x3d\x4f\xf1\x9d\x77\xc8\x9d\xc4\x18\xb2\xde\x76\xef\x60\x88\xb9\x20\xb5\x0e\x0a\x11\xad\x84\x78\xf7\x46\x5d\x5a\x51\x8f\xfe\x4b\xfe\x79\xdf\x11\x64\x9a\x55\x40\x25\x2d\x74\x1c\xc6\x85\x79\xc3\x78\xe1\x75\xed\x49\x79\x1b\x38\x37\x51\x38\x48\x26\x6f\x50\xc7\xf1\xa9\x0e\x99\x35\x10\x62\x96\xa9\x27\x4b\xfe\x37\xa1\x24\x5c\x79\x56\x2c\xfc\x2f\x6d\xdb\x3a\xcb\xde\x38\x5b\x0f\x7b\x53\x41\xd1\x80\x0a\xbd\xd1\x63\xd2\x22\x5a\x08\x27\x3f\xa7\x1b\x8a\xdc\x4b\x33\xd6\xfa\xfa\x20\xfe\xf8\xee\xbb\xc3\x5f\x7a\x02\x88\x92\xe5\xcb\xd9\xba\xfd\x44\x1e\x01\x00\x00\xff\xff\xa7\xe2\x48\x80\xe0\x00\x00\x00")

func templs_404_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templs_404_tmpl,
		"templs/404.tmpl",
	)
}

func templs_404_tmpl() (*asset, error) {
	bytes, err := templs_404_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templs/404.tmpl", size: 224, mode: os.FileMode(420), modTime: time.Unix(1422213114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templs_500_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xce\xb1\x6e\x84\x30\x0c\x06\xe0\x3d\x4f\xe1\x7a\x3f\xb8\x0e\xdd\x72\x59\x3b\x76\xe8\x13\xf8\x88\x21\x91\x8a\x8d\x42\x04\x95\x10\xef\x5e\xd3\xe5\x10\x19\xe3\x5f\xff\xf7\x6f\x1b\x44\xee\xb3\x30\x60\xd5\x09\xf7\xdd\xf9\x98\x17\xe8\x7e\x68\x9e\x1f\x28\xb4\x3c\xa9\xdc\x12\x53\xe4\x82\xc1\x81\x3d\x4f\x97\xeb\xb3\x90\x44\x84\x54\xb8\x7f\x60\x8b\xe1\x53\xa1\x2a\x8c\x94\x05\x26\x1a\xb8\x69\x1a\xdf\x52\x70\xbe\xb5\xe2\xe0\x0c\x64\x89\x60\xd0\x89\xee\x54\x2a\x4b\xc5\xe3\xdb\x84\xd3\x82\xa2\x2b\x54\xfe\xad\xb7\xce\xee\xaf\x0d\xe9\x3d\x7c\xdc\xef\xf0\xa5\xd3\xfc\x06\xdf\x3a\x72\x4d\x59\x06\x58\x2d\x04\x6b\x51\x19\xfe\x55\x4b\x1d\x75\x57\xf8\x2f\x00\x00\xff\xff\x87\x29\x86\x5a\xf4\x00\x00\x00")

func templs_500_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templs_500_tmpl,
		"templs/500.tmpl",
	)
}

func templs_500_tmpl() (*asset, error) {
	bytes, err := templs_500_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templs/500.tmpl", size: 244, mode: os.FileMode(420), modTime: time.Unix(1422213163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templs_index_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\x6a\x01\x6a\x6f\xb5\x84\xb6\x41\x1f\x32\x5b\x43\xd0\xb5\x40\x1f\x16\x14\x4b\x31\x60\x18\xf6\x40\x53\x94\xc5\x84\x22\x55\x92\x8a\xa3\x75\xfd\xee\xbb\x23\x25\x59\x72\xbc\xa1\xdd\x80\x05\x08\x4c\xf2\x8e\x77\xbf\xfb\xdd\x1f\xf1\xd3\x27\x28\x44\x29\xb5\x80\xc4\x9b\x26\xf9\xfc\xf9\x6c\x5d\xc8\x7b\xe0\x8a\x39\xb7\x49\x34\xbb\xdf\x32\xbb\xaa\x04\x2b\x84\x4d\xf2\x33\x80\xf5\xb6\xf5\xde\x68\xf0\x5d\x23\x36\x49\xdc\x24\x83\xfa\xd6\x6b\xc0\xff\x95\xd4\xa5\x49\x40\x16\x9b\xc4\x55\xcc\x8a\x04\x9c\xef\x14\xaa\x17\xd2\x35\x8a\x75\x97\xda\x68\x91\xe4\x37\x24\x5b\x67\xd1\xc6\x17\xdb\x76\x2d\xe7\xc2\xb9\x68\x7e\x67\x92\xfc\xca\xdd\x41\x25\xeb\x27\x33\x4b\xec\x28\x82\xad\x65\xba\x48\xa0\xb2\xa2\xdc\x24\x59\x92\x7f\xa8\x04\xec\x4c\x53\x09\x0b\x5b\xa1\xcc\x1e\xf6\x52\x29\x10\x0f\x08\x4f\x6a\xe8\x4c\x6b\x03\x0a\x70\xf2\x0f\x91\xa6\xe9\x3a\x63\xf9\xd9\x3a\x43\x66\xf2\x33\x64\x4c\xe8\x02\x90\xa9\x09\x77\xdc\x68\x2f\xb4\x4f\xe0\x88\x40\x6b\xf6\x91\xb6\xc9\x19\x37\x6a\x55\x17\xab\x57\x51\x50\xbd\xc8\x5b\xed\x58\x29\xd2\x1b\xf4\x65\xca\xc5\x3a\xc3\x23\x94\xd0\xdf\xf4\x5a\x84\x9b\x0c\xa2\x5e\x48\x2c\x88\x42\x7a\x83\x12\xc4\x93\xbe\x36\x85\x40\x10\x3d\xd6\x51\xd5\xd5\x4c\xa9\xfc\xda\x78\xf1\x04\xae\x74\x07\xba\xad\xb7\xc2\x3a\xd8\x09\x2d\x2c\xf3\xa2\x80\x6d\x07\xbe\x92\x0e\x58\xd3\x28\xc9\x99\x97\x98\x08\xcc\x0f\x78\xdb\x0a\x30\x5a\x75\x50\x1a\x0b\x0f\xaf\x2e\xf0\x94\x57\xd2\x0b\xee\x5b\x2b\x1c\x52\x13\x6d\x0f\x88\x07\xc7\x18\xd8\x18\xb0\x32\x4e\xea\x5d\x92\x2f\x87\xd8\x0e\x5a\x27\x78\x01\x34\xdb\x2a\xef\xfa\x50\x67\x74\x46\x09\x16\x98\x0e\x54\x60\xc4\xb2\x84\xf4\x8d\xb5\x88\x0d\xa9\x7f\xcc\xda\xd6\xad\x38\xc2\x33\xad\x87\xc3\x72\x55\x30\xbd\x9b\x73\x59\x5d\xe4\xef\x99\x25\x98\x20\xc8\x1a\x22\xbd\x98\x88\x9b\x40\xee\xe0\x67\x9d\x35\x47\xf1\x52\x51\x28\x27\xfa\xaa\xd8\x4b\x5f\x41\xfa\x73\x00\x3b\x81\x55\xbd\xcc\x3f\x0c\x45\x75\x09\x64\x30\xa6\x3c\x58\x44\xe1\x10\xce\x3b\xf7\x56\x3e\x88\xe2\x6b\x02\x0a\x1d\x37\x0f\xe7\x0d\x15\xb3\x0e\x89\x7c\x14\xcc\xaf\x63\x81\x63\xc6\x09\xc8\x35\xab\x09\x3c\x60\x97\x00\x53\x7b\xd6\x39\xa8\x98\x83\x32\xe0\x20\xbc\xc5\x33\xd0\x06\x6a\xe6\x3d\xb6\x4c\x85\x0d\x23\x3d\xec\x51\x23\x36\x40\x91\x9e\xa6\x64\xec\x93\x18\xd6\x95\xb5\xac\xfb\xbf\xc2\x62\xc1\x19\x05\x24\xbd\x0b\x31\x84\x53\x68\xac\x29\x5a\xee\x01\x79\x27\x81\x12\x7a\x87\xd9\x0a\x29\xa3\x7d\xab\x71\xd4\xa9\x8e\x0a\xe1\x30\x01\x26\xd1\x05\x47\x6f\x8d\xad\x5b\xc5\x2e\x61\xcd\xb1\xdf\xf2\xbe\x73\x7f\xbb\xfe\x9d\xf2\xbb\x84\x0d\x5c\xc3\xb7\xd0\x9f\x86\xa3\x75\x16\x14\xbf\x88\xa5\x1b\x6c\x39\xee\xff\x03\x4d\xff\xcc\x13\xe1\x3f\x6c\x00\x66\xa4\xb9\xe8\x7b\xc6\x5a\x21\x1a\x84\xe8\x70\x08\x84\xc4\x1f\x11\xe4\x60\x2f\xac\x18\xeb\x60\x6a\xf9\xc3\xde\xf4\x06\x5d\xe4\xd7\x51\x95\x95\x52\x28\xb4\x86\xc3\x1a\x0a\x59\x96\x78\x59\x63\x32\x2c\x1a\xc5\xf2\xea\xb0\xec\xee\xc5\x44\x40\x08\xdc\xcc\x2a\xd1\x4a\xc9\xeb\xa1\x22\x68\x6e\x5a\x4d\x23\x8c\x71\x8e\x76\x10\x18\x0e\xab\xe0\xaf\x61\x05\x6d\xfb\xaa\x96\x3b\x5d\x93\x49\xdb\xaa\x99\xc9\x93\x49\xa1\x54\xfc\x28\x3c\x93\xca\xcd\x3b\xb8\xcf\xce\x68\x2e\x36\xf2\x15\x6d\x27\x9d\xfc\x38\x73\x9e\x6d\x95\x58\xed\x2d\x6b\xc6\x4c\xad\xc3\xd9\x34\x33\xde\xce\x52\xb3\xf6\x55\xfe\x36\xd0\xb5\xce\x70\x79\x2c\x22\xa7\x04\xe1\x48\x88\x5b\x1b\x62\xb0\x34\xe5\xe0\x1c\xbf\x41\x70\xb9\x39\x11\xce\x23\x87\x6b\x5f\xd0\x9c\xa3\x1b\xc3\x44\x40\x63\xc5\xb1\x0a\x6e\x49\x0b\x3b\x87\xec\x06\xed\xd7\x55\xab\xef\x1c\xfc\x49\xed\x14\x1d\x1c\xfc\xcb\x67\x70\xce\xab\x63\xd5\x1e\x45\xa4\x9a\x12\xb4\xd8\xf9\x68\xf3\x62\x09\x8b\x56\xdf\x4b\xc7\x49\x13\xef\x87\xe3\xe5\xe4\xc6\x30\x6a\x23\xa4\xbf\x31\x21\x3e\xd2\xd5\x17\x74\x8f\xbe\xe0\x5b\x9b\xe5\x8f\xae\x4e\x61\x96\xf8\x02\xc0\x22\x22\x98\xbc\x4a\x5f\x0b\x35\xa7\xea\x38\x9f\xbc\xd2\x77\xd1\x33\xa9\xbf\x73\xef\xfb\x5a\xc3\x21\x8a\x65\x37\xb6\x75\x54\xd1\xc6\x8f\x0e\x50\x41\xd4\x8d\xef\x46\x95\x24\x3f\xfa\x5a\x1f\x66\xc2\xcc\x39\x45\x70\x76\x4a\x63\xba\x3b\x75\xf7\x54\x0e\x23\xae\x29\x61\x01\xeb\x79\xcc\x1f\x78\xe3\x99\x1a\x6d\xcd\x0d\x8c\xf5\x35\x73\x84\xa7\xd3\x6a\x3e\x1e\x6f\xb3\x39\xf7\x68\x35\xb9\x31\x2e\x86\x1f\xc7\xad\x6c\x70\x10\x58\xbe\x49\x2a\xef\x1b\x77\x99\x65\xbc\xd0\xb7\x2e\xc5\x77\x45\x5b\x94\x0a\x5f\x29\x29\x37\x75\xc6\x6e\xd9\x43\xa6\xe4\xd6\x65\xb7\x1f\x5b\x61\xbb\xec\x45\xfa\x3c\x7d\xd9\x6f\xd2\x5a\xea\xf4\x16\x9f\x8d\xf1\x71\xe9\xc5\x83\xcf\x6e\xd9\x3d\x8b\xd6\x29\x05\x71\xf5\xef\x1c\x32\x2e\xb2\xe7\xc1\x1b\xae\xbe\xca\x4d\xe4\xeb\x7c\x51\xb6\x9a\xd3\xac\x5e\x2c\xe1\xd3\xc8\xf4\x3d\xb3\x10\x1f\x77\xf8\x49\x21\xcb\xb4\x59\x0c\xef\xbd\xe5\xf7\xa3\x62\x3c\x49\x9d\xf0\xf8\xb0\xad\xc5\x22\x21\x40\x9e\x96\x59\x6d\xb4\xb9\x63\xf2\x84\xf6\x4e\xf8\x1b\x7c\x49\x07\xa7\x74\xf5\x27\xfc\x42\xc5\x9b\x35\xae\xb2\x9d\xc1\xef\xc7\x6e\x7a\xef\x7c\x91\x7c\x83\x2f\xee\x25\xf2\x20\xf9\xdd\x69\xc8\xf4\xb7\x97\xba\xc0\x46\x57\x26\x3e\x23\x53\x7a\x75\x63\x00\x4f\x7f\xf0\x9b\xa7\xf0\xdd\x20\xde\x7a\xc3\x16\xa7\xa0\xe0\xe6\x17\xa6\x5a\xb1\x58\x2e\x47\xb3\x9f\x7b\x18\xf4\x7b\xe0\xf0\x50\x40\x7f\x05\x00\x00\xff\xff\xc8\x9a\x0a\xdb\xc7\x0c\x00\x00")

func templs_index_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templs_index_tmpl,
		"templs/index.tmpl",
	)
}

func templs_index_tmpl() (*asset, error) {
	bytes, err := templs_index_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templs/index.tmpl", size: 3271, mode: os.FileMode(420), modTime: time.Unix(1422216135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templs_parts_base_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xdd\x6e\xdc\x36\x13\xbd\xdf\xa7\xa0\x75\xf1\xad\xf6\x83\x24\x66\xe3\xb8\x49\xba\xd2\x02\x4e\x6c\x18\x41\x81\xa4\x17\x2e\xd0\x62\xb1\x28\xb8\xd4\x48\xa2\x4d\x91\x0a\x49\xad\xbc\xb5\xf7\x51\x7a\xd7\x27\xeb\x93\x74\x28\xed\x5f\xea\xc2\xc8\x8d\x28\xce\xcc\x39\x33\x1c\xf2\x90\x8f\x8f\x24\x87\x42\x28\x20\xc1\x8a\x59\x08\xc8\x76\x3b\x4a\xcf\xae\xbe\x7c\xbc\xfd\xed\xe7\x6b\x52\xb9\x5a\xce\x47\xa9\x1f\x88\x64\xaa\xcc\x02\x50\x81\x37\x00\xcb\xe7\x23\x42\xd2\x1a\x1c\x23\xbc\x62\xc6\x82\xcb\x82\xd6\x15\xf1\xbb\xe0\xe8\xa8\x9c\x6b\x62\xf8\xda\x8a\x75\x16\xfc\x1a\xff\x72\x19\x7f\xd4\x75\xc3\x9c\x58\x49\x4c\xc4\xb5\x72\xa0\x10\xf5\xe9\x3a\x83\xbc\x84\x13\x9c\x62\x35\x64\xc1\x5a\x40\xd7\x68\xe3\x4e\x42\x3b\x91\xbb\x2a\xcb\x61\x2d\x38\xc4\xfd\x24\x22\x42\x09\x27\x98\x8c\x2d\x67\x12\xb2\xe9\x33\x9a\x1c\x2c\x37\xa2\x71\x42\xab\x13\xa6\x4b\x7b\x4f\x4a\xdd\x54\x60\x08\x5b\xe9\xd6\x11\xeb\x4c\xcb\x71\x10\x7f\xc0\xd9\x33\x8e\x7b\xd8\x74\xda\xe4\xf6\x84\xa0\xd4\xbe\x21\xd1\x09\x2c\xf2\x1f\x5d\x3c\x03\xb3\xd6\x55\xda\x9c\x40\xaf\xea\x8d\x33\x9a\xfc\xa4\xd7\x4c\x92\xd0\x6d\x0c\x53\x46\xab\x09\x02\x3d\xd2\x09\x27\x61\x7e\xd3\xd3\x93\x81\x92\x38\xd1\xd8\x94\x0e\x9e\x3e\x48\x0a\x75\x4f\x0c\xc8\x2c\xb0\xc8\xed\x38\x2e\x40\x70\xbf\xc0\xca\x40\x91\x05\x54\xd4\xac\x04\x4b\x0b\xb6\xf6\xe6\x04\x3f\xc1\x33\xa0\xdb\x48\xb0\x15\x80\xdb\xa3\xfc\x76\xd9\x1f\x29\xad\xd9\x03\xcf\x55\xb2\xd2\xda\xe1\xf2\x58\xe3\x27\x5c\xd7\xf4\x60\xa0\xe7\xc9\x79\xf2\x9a\x72\x6b\x8f\xb6\xa4\x16\x18\x65\xed\xb0\xfc\x97\xd2\xd0\xc1\x84\x69\x0e\x08\x0f\x39\x8b\xe3\x85\x28\x88\x74\xe4\xd3\x35\x79\xbf\xf4\x34\x68\x1d\xf6\x8e\x58\xc3\x8f\xf5\x69\x6b\x93\x5d\x8d\xbe\x2c\x7f\x3a\x2f\x6c\x25\xd6\x58\xd6\x5b\x2c\xeb\x30\xef\x4b\xba\x43\xfe\x94\x0e\x34\xdf\xcf\x69\xc0\x36\x5a\xe5\x74\x9a\xbc\x41\xc6\xdd\xec\x3f\xf9\xd2\xb3\x05\xa8\x5c\x14\xcb\x38\x46\x61\xd0\x41\x19\xe9\x4a\xe7\x9b\xde\xab\xd8\x9a\x70\xc9\xac\xcd\x02\xfc\x5d\x31\x43\x86\x21\x2e\xc4\x03\xe4\xb1\xd3\xcd\xde\x20\xd4\x1a\x50\x46\xc1\xae\xc8\x5c\x1c\x80\xfe\xe0\x60\xaf\xc0\xec\x7c\x84\xa0\x6a\x1d\xd4\x8d\x64\x0e\x75\x8b\x1c\x01\x49\xbc\x70\x7b\x20\x45\x64\x9f\x9a\x22\x71\xff\xf3\x02\xd5\x37\x44\xbb\x03\x7a\x20\x3b\x52\x15\xb8\xcb\x60\xbe\xa7\xb2\xb4\xd9\xfb\x1c\x3c\xb8\xb8\x6e\x1d\xe4\xc1\xfc\x7f\x5c\x37\x9b\x19\x79\xfd\x6a\x7a\x41\x52\xf6\xaf\xe3\x56\x0a\x57\xb5\xab\xbe\xed\x7b\x2d\x04\xc4\x31\x53\xfa\x2b\xe5\xf7\x15\xea\xe0\x3e\x98\xdf\xee\x3c\x29\x65\xd8\xfe\xe6\xe5\x74\x57\xb0\x06\xa9\x1b\xc8\x49\x87\xdc\xe4\xef\x3f\xff\x22\x85\x36\xdf\x66\xf6\x89\x7b\xfd\x97\x4c\xb2\x3e\x79\x80\xa2\xeb\x2f\x84\x1b\xb4\xf8\x3c\x67\x87\x44\x27\x4d\xdd\xb7\x22\xdd\x1f\x81\xb0\x68\x15\xf7\xb7\x4b\x28\x22\x1b\xe9\xa8\x8c\x4c\xc4\xa2\x7a\xf2\x28\x16\xe3\x1b\xad\x4b\x09\x97\x8a\xc9\x8d\x13\xdc\x7e\x59\xdd\x01\x77\xe3\x65\x66\x66\x62\x61\x96\x99\xff\x3c\x3d\x1d\xf0\x93\xc7\x51\xe8\x4d\xc9\xd7\x6c\x18\x9e\x9e\x16\xcb\x49\xd2\xb4\xb6\x0a\xb1\x1d\x6d\x8d\x9b\x63\x27\xdb\xa8\x77\xca\x6c\xfa\x7f\x05\x1d\xb9\xc2\xad\x0b\x27\x33\x96\xd9\x84\x1b\xc0\xc9\xb5\x04\x1f\x18\xea\x49\x34\xaa\xd1\x8a\x6d\xdc\x99\xec\x87\xcd\x2d\x2b\x3f\xe3\xa5\x84\xce\xc5\xab\xe5\x8c\x25\xcc\x6e\x14\xcf\xa6\xf8\xe7\xd5\x50\xce\xea\xa4\x61\x06\x43\x3f\xeb\x1c\x12\xa1\x2c\x18\xf7\x01\xb0\x77\x10\xfa\x25\x8d\xb6\x93\xb0\x13\x2a\xd7\x5d\x94\x6b\xde\xd7\x13\x8d\x87\x3e\x8c\xa3\x31\xa5\x5d\xd7\x25\x65\xbf\xe4\x98\xed\xd7\xdc\xb7\xf6\x38\xbb\xb3\x18\x59\xb2\xf1\x64\x36\x2a\x59\x38\x1e\x4a\x1e\x47\x64\x8c\xaf\xc3\xc5\xbb\xf7\x6f\xce\x2f\xde\xfe\x10\x4f\xbd\x01\xaf\x4d\xbd\x0f\xb3\x28\x31\x6f\x6b\xf0\x56\xf3\xcf\x82\xb7\x1f\x45\x98\xd2\x41\x6e\x29\x1d\xde\x2b\x3c\xd4\x18\xef\xcf\xf0\xc9\xeb\xe6\x55\xb2\xdd\x1e\x5d\xff\x04\x00\x00\xff\xff\x6e\xc7\x3d\xb2\xf9\x06\x00\x00")

func templs_parts_base_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templs_parts_base_tmpl,
		"templs/parts/base.tmpl",
	)
}

func templs_parts_base_tmpl() (*asset, error) {
	bytes, err := templs_parts_base_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templs/parts/base.tmpl", size: 1785, mode: os.FileMode(420), modTime: time.Unix(1422214860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templs/404.tmpl":        templs_404_tmpl,
	"templs/500.tmpl":        templs_500_tmpl,
	"templs/index.tmpl":      templs_index_tmpl,
	"templs/parts/base.tmpl": templs_parts_base_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templs": &_bintree_t{nil, map[string]*_bintree_t{
		"404.tmpl":   &_bintree_t{templs_404_tmpl, map[string]*_bintree_t{}},
		"500.tmpl":   &_bintree_t{templs_500_tmpl, map[string]*_bintree_t{}},
		"index.tmpl": &_bintree_t{templs_index_tmpl, map[string]*_bintree_t{}},
		"parts": &_bintree_t{nil, map[string]*_bintree_t{
			"base.tmpl": &_bintree_t{templs_parts_base_tmpl, map[string]*_bintree_t{}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
